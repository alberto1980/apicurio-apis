---
asyncapi: 2.0.0
defaultContentType: application/json
info:
  title: Streetlight asyncapi
  version: 1.0.0
  description: Streetlight asyncapi
servers:
  production:
    url: test.mosquitto.org:{port}
    description: Test broker
    variables:
      port:
        enum:
        - "1883"
        - "8883"
        default: "1883"
        description: Secure connection (TLS) is available through port 8883.
    protocol: mqtt
    security:
    - apiKey: []
    - supportedOauthFlows:
      - streetlights:on
      - streetlights:off
      - streetlights:dim
    - openIdConnectWellKnown: []
channels:
  smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured:
    description: The topic on which measured values may be produced and consumed.
    publish:
      operationId: receiveLightMeasurement
      summary: Inform about environmental lighting conditions of a particular streetlight.
      traits:
      - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/lightMeasured'
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
  smartylighting/streetlights/1/0/action/{streetlightId}/turn/on:
    subscribe:
      operationId: turnOn
      traits:
      - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turnOnOff'
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
  smartylighting/streetlights/1/0/action/{streetlightId}/turn/off:
    subscribe:
      operationId: turnOff
      traits:
      - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turnOnOff'
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
  smartylighting/streetlights/1/0/action/{streetlightId}/dim:
    subscribe:
      operationId: dimLight
      traits:
      - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/dimLight'
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
components:
  schemas:
    lightMeasuredPayload:
      type: object
      properties:
        lumens:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          $ref: '#/components/schemas/sentAt'
    turnOnOffPayload:
      type: object
      properties:
        command:
          type: string
          enum:
          - "on"
          - "off"
          description: Whether to turn on or off the light.
        sentAt:
          $ref: '#/components/schemas/sentAt'
    dimLightPayload:
      type: object
      properties:
        percentage:
          type: integer
          description: Percentage to which the light should be dimmed to.
          minimum: 0
          maximum: 100
        sentAt:
          $ref: '#/components/schemas/sentAt'
    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.
  messages:
    lightMeasured:
      contentType: application/json
      name: lightMeasured
      title: Light measured
      summary: Inform about environmental lighting conditions of a particular streetlight.
      payload:
        $ref: '#/components/schemas/lightMeasuredPayload'
      traits:
      - $ref: '#/components/messageTraits/commonHeaders'
    turnOnOff:
      name: turnOnOff
      title: Turn on/off
      summary: Command a particular streetlight to turn the lights on or off.
      payload:
        $ref: '#/components/schemas/turnOnOffPayload'
      traits:
      - $ref: '#/components/messageTraits/commonHeaders'
    dimLight:
      name: dimLight
      title: Dim light
      summary: Command a particular streetlight to dim the lights.
      payload:
        $ref: '#/components/schemas/dimLightPayload'
      traits:
      - $ref: '#/components/messageTraits/commonHeaders'
  securitySchemes:
    apiKey:
      type: apiKey
      description: Provide your API key as the user and leave the password empty.
      in: user
    supportedOauthFlows:
      type: oauth2
      description: Flows to support OAuth 2.0
      flows:
        implicit:
          authorizationUrl: https://authserver.example/auth
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
        password:
          tokenUrl: https://authserver.example/token
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
        clientCredentials:
          tokenUrl: https://authserver.example/token
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
        authorizationCode:
          authorizationUrl: https://authserver.example/auth
          tokenUrl: https://authserver.example/token
          refreshUrl: https://authserver.example/refresh
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
    openIdConnectWellKnown:
      type: openIdConnect
      openIdConnectUrl: https://authserver.example/.well-known
  parameters:
    streetlightId:
      description: The ID of the streetlight.
      schema:
        type: string
  operationTraits:
    kafka:
      bindings:
        kafka:
          clientId: my-app-id
  messageTraits:
    commonHeaders:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100
